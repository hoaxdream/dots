diff --git a/dwmblocks.c b/dwmblocks.c
index 91fc0c8..6940b6c 100644
--- a/dwmblocks.c
+++ b/dwmblocks.c
@@ -26,6 +26,7 @@ typedef struct {
 void dummysighandler(int num);
 #endif
 void sighandler(int num);
+void buttonhandler(int sig, siginfo_t *si, void *ucontext);
 void getcmds(int time);
 void getsigcmds(unsigned int signal);
 void setupsignals();
@@ -43,15 +44,32 @@ static int screen;
 static Window root;
 static char statusbar[LENGTH(blocks)][CMDLENGTH] = {0};
 static char statusstr[2][STATUSLENGTH];
+static char button[] = "\0";
 static int statusContinue = 1;
 static void (*writestatus) () = setroot;
 
 //opens process *cmd and stores output in *output
 void getcmd(const Block *block, char *output)
 {
+  if (block->signal)
+  {
+    output[0] = block->signal;
+    output++;
+  }
   strcpy(output, block->icon);
   char *cmd = block->command;
-  FILE *cmdf = popen(cmd,"r");
+  FILE *cmdf;
+  if (*button)
+  {
+    setenv("BUTTON", button, 1);
+    cmdf = popen(cmd,"r");
+    *button = '\0';
+    unsetenv("BUTTON");
+  }
+  else
+  {
+    cmdf = popen(cmd,"r");
+  }
   if (!cmdf)
     return;
   char c;
@@ -95,10 +113,16 @@ void setupsignals()
         signal(i, dummysighandler);
 #endif
 
+  struct sigaction sa;
   for (unsigned int i = 0; i < LENGTH(blocks); i++)
   {
-    if (blocks[i].signal > 0)
+    if (blocks[i].signal > 0) {
       signal(SIGMINUS+blocks[i].signal, sighandler);
+      sigaddset(&sa.sa_mask, SIGRTMIN+blocks[i].signal); // ignore signal when handling SIGUSR1
+    }
+    sa.sa_sigaction = buttonhandler;
+    sa.sa_flags = SA_SIGINFO;
+    sigaction(SIGUSR1, &sa, NULL);
   }
 
 }
@@ -155,6 +179,13 @@ void dummysighandler(int signum)
 {
     return;
 }
+
+void buttonhandler(int sig, siginfo_t *si, void *ucontext)
+{
+  *button = '0' + si->si_value.sival_int & 0xff;
+  getsigcmds(si->si_value.sival_int >> 8);
+  writestatus();
+}
 #endif
 
 void sighandler(int signum)
