diff --git a/dwmblocks.c b/dwmblocks.c
index 1a7e155..5cfde46 100644
--- a/dwmblocks.c
+++ b/dwmblocks.c
@@ -15,6 +15,7 @@ typedef struct {
 } Block;
 void dummysighandler(int num);
 void sighandler(int num);
+void buttonhandler(int sig, siginfo_t *si, void *ucontext);
 void getcmds(int time);
 #ifndef __OpenBSD__
 void getsigcmds(int signal);
@@ -34,15 +35,32 @@ static int screen;
 static Window root;
 static char statusbar[LENGTH(blocks)][CMDLENGTH] = {0};
 static char statusstr[2][256];
+static char button[] = "\0";
 static int statusContinue = 1;
 static void (*writestatus) () = setroot;
 
 //opens process *cmd and stores output in *output
 void getcmd(const Block *block, char *output)
 {
+  if (block->signal)
+  {
+    output[0] = block->signal;
+    output++;
+  }
   strcpy(output, block->icon);
   char *cmd = block->command;
-  FILE *cmdf = popen(cmd,"r");
+  FILE *cmdf;
+  if (*button)
+  {
+    setenv("BUTTON", button, 1);
+    cmdf = popen(cmd,"r");
+    *button = '\0';
+    unsetenv("BUTTON");
+  }
+  else
+  {
+    cmdf = popen(cmd,"r");
+  }
   if (!cmdf)
     return;
   char c;
@@ -84,12 +102,18 @@ void setupsignals()
     for(int i = SIGRTMIN; i <= SIGRTMAX; i++)
         signal(i, dummysighandler);
 
+  struct sigaction sa;
   for(int i = 0; i < LENGTH(blocks); i++)
   {
     if (blocks[i].signal > 0)
+    {
       signal(SIGRTMIN+blocks[i].signal, sighandler);
+      sigaddset(&sa.sa_mask, SIGRTMIN+blocks[i].signal); // ignore signal when handling SIGUSR1
+    }
   }
-
+  sa.sa_sigaction = buttonhandler;
+  sa.sa_flags = SA_SIGINFO;
+  sigaction(SIGUSR1, &sa, NULL);
 }
 #endif
 
@@ -156,6 +180,13 @@ void sighandler(int signum)
   getsigcmds(signum-SIGRTMIN);
   writestatus();
 }
+
+void buttonhandler(int sig, siginfo_t *si, void *ucontext)
+{
+  *button = '0' + si->si_value.sival_int & 0xff;
+  getsigcmds(si->si_value.sival_int >> 8);
+  writestatus();
+}
 #endif
 
 void termhandler(int signum)
